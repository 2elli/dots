# zmodload zsh/zprof
# uncomment first and last line to benchmark

# # p10k instant prompt
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
    source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

##################
### zsh config ###
##################

# extra completions
fpath+=~/.zfunc

##### history
# Remove older command from the history if a duplicate is to be added.
setopt HIST_IGNORE_ALL_DUPS
# dont save hist for a command starting with a space (ex. setting api key)
setopt HIST_IGNORE_SPACE
HISTSIZE=500

##### keybinds
# set key
bindkey -e
# ctrl + backspace and ctrl + del to delete word before and after respectively
bindkey '^H' backward-delete-word
bindkey '5~' delete-word
# ctrl + y to accept auto complete suggestion
bindkey '^Y' autosuggest-accept

##### paths
path+=(~/.local/bin)
path+=(~/.pdtm/go/bin)
export PATH

##### env vars
export EDITOR=nvim
export SYSTEM_EDITOR=nvim
export TERMINAL=alacritty

##### alias
alias tree="lsd --tree"
alias mux="tmuxinator"
alias nvimc="nvim --clean"
alias nvims="nvim -c \"SessionLoad\""
alias xsc="xclip -selection clipboard"
alias wlc="wl-copy"
alias wlp="wl-paste"
alias info="info --vi-keys"
alias gef="gdb -ex \"init_gef\""
alias pwndbg="gdb -ex \"init_pwndbg\""

if [[ "$XDG_SESSION_TYPE" == "wayland" ]]; then
    _copy_cmd="wl-copy"
    _paste_cmd="wl-paste"
else
    _copy_cmd="xclip -selection clipboard"
    _paste_cmd="xclip -selection clipboard"
fi

##### functions
# clear clipboard
function clear_clip {
    :|$_copy_cmd
}

# clear zsh hist
function clear_history {
    :>!$HISTFILE
    history -p
    clear
}

# clear clipboard and history
function clean {
    clear_clip
    clear_history
}

# clear _evalcache
function clear_evalcache {
    if [[ -n ZSH_EVALCACHE_DIR ]]; then
        setopt localoptions rmstarsilent
        rm -f "$ZSH_EVALCACHE_DIR"/*
    fi
}

# update some shell utils
function update_builtins {
    # clear clear evalcache
    clear_evalcache

    # print helper
    function _print_status {
        # $1 : return status
        # $2 : command string
        if [[ $# -eq 2 ]]; then
            tput bold
            # check return status
            if [[ $1 -eq 0 ]]; then
                tput setaf 2
                echo "$2 updated"
            else
                tput setaf 1
                echo "$2 update failed"
            fi
            tput sgr0
            echo
        fi
    }

    # mise
    mise self-update &&
    mise upgrade &&
    mise prune
    _print_status $? "mise"

    # pyenv
    pyenv update &&
    pyenv rehash
    _print_status $? "pyenv"

    # pipx
    pipx upgrade-all
    _print_status $? "pipx"

    # tmux tpm
    ~/.config/tmux/plugins/tpm/scripts/install_plugins.sh &&
    ~/.config/tmux/plugins/tpm/scripts/clean_plugins.sh
    _print_status $? "tmux tpm"

    # zim
    zimfw upgrade &&
    zimfw update &&
    zimfw build
    _print_status $? "zimfw"
}


##################
### zim config ###
##################

# --------------------
# Module config
# --------------------

# use degit for faster and lighter module install
zstyle ':zim:zmodule' use 'degit'

##### autosuggestions
# Disable automatic widget re-binding on each precmd. This can be set when
# zsh-users/zsh-autosuggestions is the last module in your ~/.zimrc.
ZSH_AUTOSUGGEST_MANUAL_REBIND=1

##### highlighting
typeset -A ZSH_HIGHLIGHT_STYLES
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)
ZSH_HIGHLIGHT_STYLES[suffix-alias]=fg=blue,underline
ZSH_HIGHLIGHT_STYLES[precommand]=fg=blue,underline
ZSH_HIGHLIGHT_STYLES[arg0]=fg=blue

# ------------------
# Initialize modules
# ------------------

ZIM_HOME=${ZDOTDIR:-${HOME}}/.zim
# Download zimfw plugin manager if missing.
if [[ ! -e ${ZIM_HOME}/zimfw.zsh ]]; then
    if (( ${+commands[curl]} )); then
        curl -fsSL --create-dirs -o ${ZIM_HOME}/zimfw.zsh \
            https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh
    else
        mkdir -p ${ZIM_HOME} && wget -nv -O ${ZIM_HOME}/zimfw.zsh \
            https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh
    fi
fi
# Install missing modules, and update ${ZIM_HOME}/init.zsh if missing or outdated.
if [[ ! ${ZIM_HOME}/init.zsh -nt ${ZDOTDIR:-${HOME}}/.zimrc ]]; then
    source ${ZIM_HOME}/zimfw.zsh init -q
fi
# Initialize modules.
source ${ZIM_HOME}/init.zsh

# ------------------------------
# Post-init module configuration
# ------------------------------

# set number of chars to show of directory in prompt, 0 = all chars
zstyle ':zim:prompt-pwd:fish-style' dir-length 0

##### pyenv
export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
zsh-defer _evalcache pyenv init - zsh #eval "$(pyenv init - zsh)"
zsh-defer _evalcache pyenv virtualenv-init - zsh #eval "$(pyenv virtualenv-init - zsh)"

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# zprof
